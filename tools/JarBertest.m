function [JB pval] = JarBertest(x)
% JarBertest computes the Jarque-Bera test statistic and the corresponding
% p-value. If the sample size is less than and equal 2000, a pre-calculated 
% critical table is employed to return a p-value by interpolation. For
% sampel size greater than 2000, the asymptotical chi2 distribution with
% degree of freedom 2 is used.
% syntax : [JB pval] = JarBertest(x)
%
% inputs :
%   x: data , 
%
% outputs :
%   JB :  test statistic. 
%   pval: p-value
%
% created by    Chun-Chao Wang
%               Dept. of Statistics    
%               National Taipei University
%               Taipei, Taiwan
%
% References:
% Jarque, C.M., and Bera, AK(1987), "A test for normality of observations
%     and regression residuals," International Statistical Review, 55(2),
%     163-172
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

n=length(x);
if n<2
    error('Sample size must be at least 2.');
end
g1=sum((x-mean(x)).^3)/std(x,1)^3/n;
g2=sum((x-mean(x)).^4)/std(x,1)^4/n;
JB = n*(g1^2/6+(g2-3)^2/24);%the Jarque-Bera test statistic

if n<=2000 % by critical values
    pval=CVTable(JB, n);
else % asymptotically distributed as chi2(2)
    pval= 1 - chi2cdf(JB,2);
end


function pval=CVTable(JB, n)
% compute p-value by JB statistic and sample size n

alfa=[0.0010 0.0100 0.0250 0.0500 0.0750 0.1000 0.2000 0.2500 0.5000];
CV=[ ...
 3     0.531249   0.531186 0.530846 0.529694 0.527765 0.525098 0.507163 0.494253 0.406307; ...
 4     0.960341   0.939329 0.904488 0.852105 0.801822 0.755753 0.630661 0.595193 0.474198; ...
 5     1.826620   1.629790 1.435944 1.217300 1.060924 0.940670 0.729072 0.686781 0.527520; ...
 10   10.764979   5.664247 3.692384 2.508070 1.953278 1.625167 1.122325 1.017969 0.695757; ...
 15   19.500283   8.245476 5.103826 3.288941 2.499729 2.051177 1.377870 1.231919 0.789613; ...
 20   24.741200   9.615694 5.883427 3.796493 2.857552 2.344377 1.557723 1.383647 0.854629; ...
 25   28.380556  10.647922 6.439614 4.130816 3.146817 2.577945 1.707136 1.509620 0.907153; ...
 30   30.751351  11.429232 6.877553 4.403479 3.345374 2.745174 1.818363 1.602320 0.942722; ...
 35   31.938907  11.656077 7.083094 4.580231 3.491962 2.880792 1.911663 1.676167 0.976421; ...
 40   32.805048  12.117061 7.275829 4.741289 3.624568 2.988975 1.993083 1.748065 1.005607; ...
 45   34.152668  12.348539 7.489342 4.864419 3.738357 3.096784 2.069742 1.811704 1.028734; ...
 50   32.164349  12.399037 7.584732 5.020128 3.834708 3.193062 2.129274 1.863632 1.043380; ...
 60   33.984199  12.525890 7.726016 5.151248 3.995276 3.341237 2.238149 1.952787 1.078757; ...
 70   32.971047  12.619274 7.846878 5.262022 4.095118 3.446077 2.311035 2.009882 1.102344; ...
 80   33.506685  12.362739 7.805770 5.281838 4.162099 3.523680 2.381140 2.070740 1.121812; ...
 90   31.914349  12.538958 7.982018 5.384756 4.249453 3.605484 2.437250 2.115174 1.136623; ...
 100  32.762152  12.681835 8.019396 5.453647 4.333198 3.683162 2.488210 2.153424 1.150003; ...
 125  29.828200  12.510635 8.080863 5.567709 4.469274 3.824566 2.588394 2.246927 1.189821; ...
 150  29.730998  12.248868 7.962828 5.605482 4.541840 3.908730 2.658649 2.304256 1.214695; ...
 175  28.100419  12.022183 7.951242 5.636914 4.608665 3.977858 2.710618 2.343129 1.220019; ...
 200  27.045995  11.787376 7.897010 5.678586 4.650790 4.033885 2.750059 2.379336 1.239328; ...
 250  25.976832  11.500751 7.807011 5.706284 4.727286 4.123278 2.829559 2.438316 1.258625; ...
 300  24.041804  11.177442 7.759144 5.769515 4.812152 4.200759 2.882756 2.486775 1.275265; ...
 400  22.176002  10.819375 7.651837 5.776669 4.856479 4.248965 2.932208 2.522285 1.287495; ...
 500  21.401211  10.705652 7.671920 5.847589 4.925314 4.325722 2.984592 2.574395 1.307908; ...
 800  19.661798  10.348424 7.653187 5.903957 5.010093 4.419508 3.062552 2.640878 1.333849; ...
 1000 18.498380  10.099317 7.547971 5.913294 5.049732 4.465040 3.098713 2.667803 1.352749; ...
 1200 18.021887  9.9751999 7.526467 5.938519 5.069553 4.479218 3.105292 2.673619 1.345962; ...
 1400 17.573777  9.9157920 7.535202 5.952440 5.083698 4.494000 3.115666 2.681634 1.348888; ...
 1600 17.401648  9.8792422 7.493924 5.952485 5.091803 4.509460 3.141426 2.707754 1.361908; ...
 1800 16.236598  9.7625199 7.499578 5.954369 5.109449 4.527844 3.151465 2.716578 1.365757; ...
 2000 16.338896  9.7240131 7.450497 5.927340 5.083016 4.516160 3.157800 2.721421 1.359318];

% pchip performs better than spline here
cvs = pchip(CV(:,1),CV(:,2:end)',n);% interpolate samples 
pp=pchip(alfa, cvs);
if JB < cvs(end)
    pval=alfa(end);
elseif JB > cvs(1)
    pval=alfa(1);
else
    i = find(JB > cvs, 1, 'first');
    pval = fzero(@(x) ppval(pp,x)-JB,alfa([i-1 i]));% be cautious with fzero
end


